"""
    Copyright 2017 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import web
import ssh
import ip

entity Provider:
    """
        The configuration to access Amazon Web Services
    """
    string name
    string region
    string availability_zone
    string access_key
    string secret_key
    bool auto_agent=true
end

implement Provider using std::none
implement Provider using agentConfig when auto_agent

implementation agentConfig for Provider:
    std::AgentConfig(autostart=true, agentname=name, uri="local:", provides=self)
end

entity AWSResource extends std::PurgeableResource, std::ManagedResource:
end

entity ELB extends AWSResource:
    """
        An ELB load balancer

        :param purged The state of the loadbalancer
        :param purge_on_delete Purge the loadbalancer when it is no longer included in the configuration model.
    """
    string name
    string security_group="default"
    number listen_port=80
    number dest_port=80
    string protocol="http"
end

implement ELB using std::none

ELB.provider [1] -- Provider.elb [0:]

entity VMAttributes:
    string flavor
    string image
    string user_data
    string subnet_id
    bool source_dest_check=true
end

entity VirtualMachine extends VMAttributes, AWSResource:
    """
        This entity represents a virtual machine that is hosted on an IaaS

        :param flavor An id representing the type of virtual machine
        :param image An id that represents the image that needs to be used to
                        boot the virtual machine.
        :param user_data A script that is booted on first boot
        :param public_key_name The name of the public key that needs to be deployed
    """
    string name
    dict tags = {}
end

index VirtualMachine(provider, name)

implement VirtualMachine using req

implementation req for VirtualMachine:
    self.requires = self.provider.requires
end

VirtualMachine.provider [1] -- Provider.virtual_machines [0:]
VirtualMachine.public_key [1] -- ssh::Key

ELB.instances [0:] -- VirtualMachine

entity Host extends VMAttributes, ip::Host:
    """
        A subclass of ip::Host that creates a virtual machine on AWS.
    """
end

Host.vm [1] -- VirtualMachine
Host.provider [1] -- Provider
Host.public_key [1] -- ssh::Key

Host.public_ip [0:1] -- ip::IP
Host.private_ip [1] -- ip::IP

implementation awsHost for Host:
    self.vm = VirtualMachine(name=name, public_key=public_key, provider=provider, user_data=user_data, image=image,
                             flavor=flavor, subnet_id=subnet_id, source_dest_check=source_dest_check)
    self.requires = self.vm

    self.private_ip = ip::IP(v4=std::getfact(vm, "ip_address"))
    self.public_ip = ip::IP(v4=std::getfact(vm, "public_ip"))
    self.ip = self.public_ip.v4
end

implement Host using std::hostDefaults, awsHost